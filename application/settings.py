"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import logging
import os, sys
from pathlib import Path
from configs.config import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bm_+x1ju4$%))h7e&on1(hd3@&!iafu7z6$5e0&g)lghfnp+ew'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "apps.user",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'application.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'application.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False  # 设置为中国时间

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ================================================= #
# ********************* 日志配置 ******************* #
# ================================================= #
LOG_DIR = os.path.join(BASE_DIR, LOG_FOLDER)
os.makedirs(LOG_DIR, mode=0o775, exist_ok=True)
LOG_CLASS = "utils.logs.LoguruBaseRotatingHandler"
LOGFILTER = "utils.logs.LevelFilter"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "format": LOG_FORMAT,
            # 打日志的格式
            "datefmt": "%Y-%m-%d %H:%M:%S %z",  # 时间显示方法
            # "class": "logging.Formatter"
        },
        'simple': {  # 简单格式
            'format': '%(levelname)s %(message)s'
        },
    },
    # 这里是定义过滤器，需要注意的是，由于 'filters' 是 logging.config.dictConfig 方法要求在配置字典中必须给订的 key ,所以即使不使用过滤器也需要明确给出一个空的结构。
    "filters": {
        "error_filter": {"()": LOGFILTER, "level": logging.ERROR},
        "warn_filter": {"()": LOGFILTER, "level": logging.WARN},
        "info_filter": {"()": LOGFILTER, "level": logging.INFO},
        "debug_filter": {"()": LOGFILTER, "level": logging.DEBUG},
    },
    "handlers": {
        "error": {
            "level": "ERROR",
            "class": LOG_CLASS,
            "formatter": "standard",
            "filters": ["error_filter"],
            "filename": os.path.join(LOG_DIR, "error.log"),
            "maxBytes": max_bytes,
            "backupCount": backup_count,
        },
        "warning": {
            "level": "WARNING",
            "class": LOG_CLASS,
            "formatter": "standard",
            "filters": ["warn_filter"],
            "filename": os.path.join(LOG_DIR, "warn.log"),
            "maxBytes": max_bytes,
            "backupCount": backup_count,
        },
        "info": {
            "level": "INFO",
            "class": LOG_CLASS,
            "formatter": "standard",
            "filters": ["info_filter"],
            "filename": os.path.join(LOG_DIR, "info.log"),
            "maxBytes": max_bytes,
            "backupCount": backup_count,
        },
        "debug": {
            "level": "DEBUG",
            "class": LOG_CLASS,
            "formatter": "standard",
            "filters": ["debug_filter"],
            "filename": os.path.join(LOG_DIR, "debug.log"),
            "maxBytes": max_bytes,
            "backupCount": backup_count,
        },
        # 控制台输出
        "console": {"level": "DEBUG", "class": "logging.StreamHandler", "formatter": "standard"},
    },
    "loggers": {
        "gunicorn.error": {
            "level": "ERROR",
            "handlers": ["error"],
            "propagate": True,
            "qualname": "gunicorn.error",
        },
        "gunicorn.access": {
            "level": "DEBUG",
            "handlers": ["debug"],
            "propagate": False,
            "qualname": "gunicorn.access",
        },
        "django": {
            "handlers": ["info", "warning", "debug", "error", ],
            "level": "INFO",
            "propagate": True
        },
        "uvicorn": {
            "handlers": ["info", "warning", "debug", "error", ],
            "propagate": True,
            "level": "INFO",
        },
        "uvicorn.error": {
            "level": "ERROR",
            "handlers": ["error"],
            "propagate": True
        },
        "uvicorn.access": {
            "handlers": ["info"],
            "level": "INFO",
            "propagate": False},
        "celery.task": {
            "handlers": ["info", "warning", "debug", "error", ],
            "level": "DEBUG",
            "propagate": True
        },
        # 数据库相关日志
        'django.db.backends': {
            'handlers': ["info", "warning", "debug", "error", ],
            'propagate': False,
            'level': 'INFO',
        },
    },
}

# 使用自定义日志输出反射到默认logging上
# 如果是需要使用logging 替换为默认的日志输出则需要
LOGGING_CONFIG = "utils.logs.simple_log_injector"

# ================================================= #
# **************** 验证码配置  ******************* #
# ================================================= #


CAPTCHA_STATE = True
CAPTCHA_IMAGE_SIZE = (160, 60)  # 设置 captcha 图片大小
CAPTCHA_LENGTH = 4  # 字符个数
CAPTCHA_TIMEOUT = 1  # 超时(minutes)
CAPTCHA_OUTPUT_FORMAT = '%(image)s %(text_field)s %(hidden_field)s '
CAPTCHA_FONT_SIZE = 42  # 字体大小
CAPTCHA_FOREGROUND_COLOR = '#409eff'  # 前景色
CAPTCHA_BACKGROUND_COLOR = '#FFFFFF'  # 背景色
CAPTCHA_NOISE_FUNCTIONS = (
    'captcha.helpers.noise_arcs',  # 线
    # 'captcha.helpers.noise_dots', # 点
)
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge' #字母验证码
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'  # 加减乘除验证码

# ================================================= #
# ******************** celery配置 ******************** #
# ================================================= #
CELERY_TIMEZONE = 'Asia/Shanghai'  # celery 时区问题
CELERY_BROKER_URL = f'{REDIS_URL}/10'  # Broker配置，使用Redis作为消息中间件(无密码)
# CELERY_BROKER_URL = 'redis://lybbn:{}@127.0.0.1:6379/10'.format('123456')  #lybbn 代表 账号（没有可省略）  {} 存放密码  127.0.0.1连接的 ip  6379端口  10 redis库
# CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/11' # 把任务结果存在了Redis
CELERY_RESULT_BACKEND = 'django-db'  # celery结果存储到数据库中django-db
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'  # Backend数据库
CELERY_RESULT_PERSISTENT = True
CELERY_RESULT_EXTENDED = True
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERY_ENABLE_UTC = False
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}  # 连接超时
CELERY_TASK_SERIALIZER = 'json'  # 任务序列化和反序列化使json
CELERY_RESULT_SERIALIZER = 'json'
# CELERYD_CONCURRENCY = 2  #并发worker数量
CELERY_WORKER_CONCURRENCY = 2  # 并发数
CELERYD_FORCE_EXECV = True  # 防止死锁,应确保为True
CELERY_TASK_TIME_LIMIT = 60 * 30 * 5  # 限制celery任务执行时间，# 单个任务的运行时间限制，否则会被杀死
CELERYD_MAX_TASKS_PER_CHILD = 100  # worker执行100个任务自动销毁，防止内存泄露
CELERYD_TASK_SOFT_TIME_LIMIT = 6000  # 单个任务的运行时间不超过此值(秒)，否则会抛出(SoftTimeLimitExceeded)异常停止任务
CELERY_DISABLE_RATE_LIMITS = True  # 即使任务设置了明确的速率限制，也禁用所有速率限制。
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True  # 去除celery6.0启动时warning警告，确保在启动时进行代理连接重试
